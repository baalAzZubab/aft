From e7ba7884ded15ca381f3cba6b218abce5d19fbc8 Mon Sep 17 00:00:00 2001
From: baalAzZubab <chris.assmus@gmx.de>
Date: Mon, 26 Oct 2020 16:32:08 +0100
Subject: [PATCH] Changes to make introsort.cpp usable for aft

---
 code/sorting/src/intro_sort/Makefile       |   8 ++
 code/sorting/src/intro_sort/intro_sort.cpp | 107 +++++++++++++++------
 2 files changed, 84 insertions(+), 31 deletions(-)
 create mode 100644 code/sorting/src/intro_sort/Makefile

diff --git a/code/sorting/src/intro_sort/Makefile b/code/sorting/src/intro_sort/Makefile
new file mode 100644
index 00000000..d40608b3
--- /dev/null
+++ b/code/sorting/src/intro_sort/Makefile
@@ -0,0 +1,8 @@
+
+CPPFLAGS=-Wall -O3
+
+default:
+	$(CXX) $(CPPFLAGS) -o introsort intro_sort.cpp
+
+clean:
+	rm introsort
diff --git a/code/sorting/src/intro_sort/intro_sort.cpp b/code/sorting/src/intro_sort/intro_sort.cpp
index d3d2ee38..b76b6f5f 100644
--- a/code/sorting/src/intro_sort/intro_sort.cpp
+++ b/code/sorting/src/intro_sort/intro_sort.cpp
@@ -1,17 +1,19 @@
 #include <cmath>
 #include <algorithm>
 #include <iostream>
+#include <vector>
+#include <fstream>
 using namespace std;
-void introsort_r(int a[], int first, int last, int depth);
-void _introsort(int a[], int n);
-int _partition(int a[], int first, int last);
-void _insertion(int a[], int n);
-void _swap(int *a, int *b);
-void _doheap(int a[], int begin, int end);
-void _heapsort(int a[], int begin, int end);
-bool _isSorted(int a[], int end);
-
-void introsort_r(int a[], int first, int last, int depth)
+void introsort_r(uint64_t a[], int first, int last, int depth);
+void _introsort(uint64_t a[], int n);
+int _partition(uint64_t a[], int first, int last);
+void _insertion(uint64_t a[], int n);
+void _swap(uint64_t *a, uint64_t *b);
+void _doheap(uint64_t a[], int begin, int end);
+void _heapsort(uint64_t a[], int begin, int end);
+bool _isSorted(uint64_t a[], int end);
+
+void introsort_r(uint64_t a[], int first, int last, int depth)
 {
     while (last - first > 0)
     {
@@ -29,13 +31,13 @@ void introsort_r(int a[], int first, int last, int depth)
     }
 }
 
-void _introsort(int a[], int n)
+void _introsort(uint64_t a[], int n)
 {
     introsort_r ( a, 0, n - 1, (int(2 * log(double(n)))));
     _insertion(a, n);
 }
 
-int _partition ( int a[], int first, int last)
+int _partition ( uint64_t a[], int first, int last)
 {
     int pivot, mid = (first + last) / 2;
 
@@ -58,27 +60,28 @@ int _partition ( int a[], int first, int last)
     return pivot;
 }
 
-void _insertion ( int a[], int n )
+void _insertion ( uint64_t a[], int n )
 {
     int i;
     for (i = 1; i < n; i++)
     {
-        int j, save = a[i];
+        int j;
+        uint64_t save = a[i];
         for (j = i; j >= 1 && a[j - 1] > save; j--)
             a[j] = a[j - 1];
         a[j] = save;
     }
 }
 
-void _swap(int *a, int *b)
+void _swap(uint64_t *a, uint64_t *b)
 {
-    int save = *a;
+    uint64_t save = *a;
     *a = *b;
     *b = save;
 }
-void _doheap(int a[], int begin, int end )
+void _doheap(uint64_t a[], int begin, int end )
 {
-    int save = a[begin];
+    uint64_t save = a[begin];
     while (begin <= end / 2)
     {
         int k = 2 * begin;
@@ -92,7 +95,7 @@ void _doheap(int a[], int begin, int end )
     a[begin] = save;
 }
 
-void _heapsort(int a[], int begin, int end )
+void _heapsort(uint64_t a[], int begin, int end )
 {
     int i;
     for (int i = (end - 1) / 2; i >= begin; i--)
@@ -103,7 +106,7 @@ void _heapsort(int a[], int begin, int end )
         _doheap(a, begin, i - 1);
     }
 }
-bool _isSorted(int a[], int end)
+bool _isSorted(uint64_t a[], int end)
 {
     for (int i = 0; i < end; i++)
     {
@@ -114,16 +117,58 @@ bool _isSorted(int a[], int end)
     }
     return true;
 }
-int main()
+
+bool empty_file(std::ifstream& file){
+  return file.peek() == std::ifstream::traits_type::eof();
+}
+
+int main(int argc, char** argv)
 {
-    int arrayNum[50], t;
-    cout << "Enter Number of Elements:";
-    cin >> t;
-    for (int y = 0; y < t; y++)
-        cin >> arrayNum[y];
-    _introsort(arrayNum, t);
-    for (int x = 0; x < t; x++)
-        std::cout << x << ":" << arrayNum[x] << std::endl;
-    cin.get();
-    return 0;
+  if (argc != 2){
+    cout<<"Usage: inputfile"<<endl;
+    exit(1);
+  }
+  string file_name = argv[1];
+  ifstream file;
+  file.open(file_name);
+  if (!file)exit(1);
+
+  if (empty_file(file)){
+    cout<<"File format does not meet specification"<<endl;
+    exit(1);
+  }
+  size_t elems;
+  file >> elems;
+
+  std::vector<uint64_t> A;
+  A.reserve(elems);
+
+  for (size_t i = 0; i < elems; ++i) {
+    if (empty_file(file)) {
+    cout<<"File format does not meet specification"<<endl;
+    exit(1);
+    }
+    uint64_t l;
+    file >> l;
+    A.push_back(l);
+  }
+  // create a int array from vector
+  uint64_t* arrayNum = &A[0];
+
+  _introsort(arrayNum, int(elems));
+  for (size_t i = 0; i < elems; ++i){
+    cout<< A[i]<< endl;
+  }
+  return 0;
+
+    // int arrayNum[50], t;
+    // cout << "Enter Number of Elements:";
+    // cin >> t;
+    // for (int y = 0; y < t; y++)
+    //     cin >> arrayNum[y];
+    // _introsort(arrayNum, t);
+    // for (int x = 0; x < t; x++)
+    //     std::cout << x << ":" << arrayNum[x] << std::endl;
+    // cin.get();
+    // return 0;
 }
-- 
2.29.0

